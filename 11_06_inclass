;; Warmup for Tuesday, November 6
;; What is the output? Please use your computer
;; only for your notes!

;; (def primes '(2 3 5 7 11 13))
;; (conj (range 5) (last primes))

;; today: for loops, if statements
;; note: I wrote the syntax on the whiteboard, not in these comments

;; (for [i (range 10)] (* i 2))

# Ruby version of the line above:
# for i in (0..9)
#   puts i * 2
# end

;; typically we use the variable in the output statement
;; but here I am not doing it (to illustrate why):
;; (for [i (range 10)] (* 1 2))

;; (for [cat primes dog '(2 3 4)] (+ cat dog))

;; (for [dog '(2 3 4) cat '(2 3 5 7 11 13)] (+ cat dog))

;; (def daves_list '("a" "b" "c" "d" "e" "f" "g"))
;; (for [k '(1 3 5)] (nth daves_list k))

# Ruby version of the two lines above:
# daves_list = ["a", "b", "c", "d", "e", "f", "g"]
# for k in [1, 3, 5]
#   puts daves_list[k]
# end

;; (for [x '(1 2 3) y '(4 5)] (list x y))

;; (for 
;;   [x '(:C4 :D4 :E4) 
;;    y '(1 0.5 0.5)] 
;;   (list x y)
;; )
  
;; conditionals (if statements)

;; (if (> 2 3) "2 is greater than 1" "2 is less than 1")

;; (defn longer_list
;;   "Reported if lst1 has more entries than lst2."
;;   [lst1 lst2]
;;   (if (> (count lst1) (count lst2))
;;     "List 1 is longer!"
;;     "List 1 is not longer."
;;   )
;; )

# Ruby version of the function above
# Note: in Ruby, a function is called a "method":
# def longer_list(lst1, lst2)
#   if lst1.count > lst2.count
#     puts "List 1 is longer!"
#   else
#     puts "List 1 is not longer."
#   end
# end

;; map (a built-in Clojure function)

;; dec is a built-in function as well:
;; (map dec '(1 3 6 7))

;; we can use map to make pairs from lists, as in Sonic Pi's play-pattern-timed function:
;; (map list '(1 3 6 7) '(9 6 3 2))
;; (map list '(:C4 :D4 :E4) '(1 2 3))
;; (map + '(5 6 7) '(1 2 3 4) '(9 9 9 9 9 9 9))
