;; Welcome to Clojure! Everything is commented out here, so just
;; uncomment the stuff that is clearly not a comment:

;; The syntax in Clojure is: (function arguments)
;; function is either a math operation or a built-in
;; algorithm that will run on the arguments
;; (+ 1 1)
;; (+ 10 20)
;; (+ 1 2 3 4 5 6 7 8 9 10)
;; (+ 4 (+ 3 7))

;; What if we want (1 - 2) + 3
;; (+ (- 1 2) 3)
;; ((- 1 2) + 3) ;; -> (-1 + 3) -> error

;; (* 4 5)

;; Clojure has a ratio data type:
;; (/ 15 5)
;; (/ 5 4)
;; (/ 18 12)

;; What is 1/2 + 1/4? Should be 3/4
;; (+ 1/2 1/4)
;; (+ (/ 1 2) (/ 1 4))

;; Another data type is float (think: decimals)
;; (float 1/2)
;; (float (+ 1/2 1/4))
;; (float (+ 13/411 610/99))

;; (= 1/2 4/8) ;; -> true
;; (= 1/2 4/7) ;; -> false
;; (> 1/2 4/7) ;; -> false

;; (mod a b) return the remainder of dividing b into a
;; (mod 10 3) ;; -> 1
;; (mod 12 2) ;; -> 0
;; (mod 909 132) ;; -> 117
;; (mod 30 11 3) ;; -> error

;; I want (mod 30 11 3) damn it. It should be 2.
;; (mod (mod 30 11) 3)

;; Lists are a big deal in Clojure. When we create a
;; list, we use parentheses, but in Clojure the first
;; entry must be a function, so this is a quandary..
;; we solve this issue with quote mark:
;; '(1 2 3 4)
;; (list 1 2 3 4)
;; (first '(1 2 3 4))
;; (last '(1 2 3 4))
;; (nth '(1 2 3 4 5 6 7) 5) ;; -> 6
;; (take 4 '(1 2 3 4 5 6 7)) ;; -> (1 2 3 4)
;; (drop 5 '(1 2 3 4 5 6 7)) ;; -> (6 7)

;; Let's try to grab the sub-list (5 6 7) from
;; the master-list (1 2 3 4 5 6 7 8 9):

;; Stepping-stone:
;; (drop 4 '(1 2 3 4 5 6 7 8 9)) ;; -> (5 6 7 8 9)

;; Answer:
;; (take 3 (drop 4 '(1 2 3 4 5 6 7 8 9))) ;; -> (5 6 7)

;; Further discussion:
;; (take 3 '(5 6 7 8 9))

;; To make this faster:
;; (range 30)
;; (range 10, 20)

;; Create variables that will store data:
;; (def bananas '(1 2 3 4 5 6))
;; (first bananas)
;; (def apples (range 100))
